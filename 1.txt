public class SudokuSolver {

    public boolean solve(int[][] board) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (board[row][col] == 0) { // Find an empty space
                    for (int num = 1; num <= 9; num++) {
                        if (isValid(board, row, col, num)) {
                            board[row][col] = num; // Put in number
                
                            if (solve(board)) {
                                return true; // If successful, return true
                            }
                
                            board[row][col] = 0; // Backtrack
                        }
                    }
                    return false; // No number can be placed
                }
            }
        }
        return true; // Solved
    }

    private boolean isValid(int[][] board, int row, int col, int num) {
        // Check the row, column, and 3x3 box for validity
        for (int x = 0; x < 9; x++) {
            if (board[row][x] == num || board[x][col] == num || 
                board[row - row % 3 + x / 3][col - col % 3 + x % 3] == num) {
                return false;
            }
        }
        return true;
    }
}


import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import java.net.URL;

public class SudokuClient {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://localhost:8080/SudokuWebService?wsdl");
        QName qname = new QName("http://yournamespace/", "SudokuWebService");
        Service service = Service.create(url, qname);
        SudokuWebService sudokuService = service.getPort(SudokuWebService.class);

        int[][] board = { /* input your Sudoku board */ };
        int[][] solvedBoard = sudokuService.solveSudoku(board);

        // Display the solved board
    }
}